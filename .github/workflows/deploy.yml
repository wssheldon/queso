name: Deploy to ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: queso-repo
  ECS_SERVICE: queso-service
  ECS_CLUSTER: queso-cluster
  ECS_TASK_DEFINITION: queso-task
  CONTAINER_NAME: queso-container
  PULUMI_SKIP_UPDATE_CHECK: true
  PULUMI_STATE_BUCKET: queso-state

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Pulumi
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          pulumi version

      - name: Install dependencies
        run: |
          cd distribution/ecs
          npm install

      - name: Clear Pulumi locks
        run: |
          cd distribution/ecs
          pulumi login s3://${{ env.PULUMI_STATE_BUCKET }}
          # Try to cancel any existing operations
          pulumi cancel --yes || true
          # Force remove lock files if cancel didn't work
          aws s3 rm s3://${{ env.PULUMI_STATE_BUCKET }}/.pulumi/locks/organization/queso/prod/ --recursive || true
          # Wait a moment for S3 consistency
          sleep 5

      - name: Deploy infrastructure
        run: |
          cd distribution/ecs
          pulumi login s3://${{ env.PULUMI_STATE_BUCKET }}
          pulumi stack select prod --create
          pulumi config set aws:region ${{ env.AWS_REGION }}
          pulumi up --yes
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build server
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f queso/queso-server/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
